# Development Profile Configuration
spring:
  # Database Configuration - PostgreSQL for Development
  datasource:
    url: jdbc:postgresql://localhost:5432/challenger_db
    username: challenger_user
    password: challenger_password_secure_123
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 2
      maximum-pool-size: 10
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 30000
      # Development optimizations
      connection-init-sql: SELECT 1
      auto-commit: false

  # JPA Configuration - Development Settings
  jpa:
    #    hibernate:
    #      ddl-auto: create-drop # Creates and drops schema on startup/shutdown
    #      ddl-auto: validate
    #      naming:
    #        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    #        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    properties:
      hibernate:
        hbm2ddl:
          auto: validate
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: true
        use_sql_comments: true
        generate_statistics: true
        jdbc:
          batch_size: 10
          fetch_size: 50
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: false
          use_query_cache: false
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
    show-sql: true
  #    generate-ddl: true

  # Flyway Configuration - Disabled for development (using create-drop)
  flyway:
    enabled: false
    baseline-on-migrate: true
    validate-on-migrate: false

  # H2 Console (disabled since we're using PostgreSQL)
  h2:
    console:
      enabled: false

  # Development Web Configuration
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      enabled: true

  # Jackson Configuration - Development friendly
  jackson:
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
      indent-output: true # Pretty print JSON in development
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null

  # Development Security (Less restrictive)
  security:
    require-ssl: false

  # Development Cache Configuration
  cache:
    type: simple # Use simple cache for development

# Server Configuration - Development
server:
  #  port: 8080
  servlet:
    context-path: /api
  compression:
    enabled: false # Disable compression for easier debugging
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on-param # Shows stack traces when ?trace=true

# Application Configuration - Development Overrides
app:
  # JWT Configuration - Development (Less secure for easier testing)
  jwt:
    secret: devSecretKey123456789012345678901234567890
    expiration: 3600000 # 1 hour (shorter for development)
    refresh-expiration: 86400000 # 24 hours
    header: Authorization
    token-prefix: "Bearer "

  # Storage Configuration - Local for development
  storage:
    type: s3 # local, s3
    local:
      upload-dir: ${UPLOAD_DIR:./uploads}
    s3:
      access-key: challenger_minio
      secret-key: challenger_secret_123
      region: us-east-1
      endpoint: http://localhost:9000  # Points to your MinIO instance
      bucket-name: challenger-app
      cloudfront-domain: ""  # Leave empty for direct MinIO access

      upload:
        max-file-size: 10485760  # 10MB
        photo-verification-dir: uploads/verification-photos/
  # Metrics Configuration
  metrics:
    enabled: true

  # CORS Configuration - More permissive for development
  cors:
    allowed-origins: "*" # Allow all origins in development
    allowed-methods: "*" # Allow all methods
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

  # Rate Limiting - Disabled for development
  rate-limit:
    enabled: false
    requests-per-minute: 1000
    requests-per-hour: 10000

# Management/Actuator Configuration - Development
management:
  endpoints:
    web:
      exposure:
        include: "*" # Expose all endpoints in development
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    shutdown:
      enabled: true # Allow graceful shutdown in development
  info:
    env:
      enabled: true
    java:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

# Logging Configuration - Development (More verbose)
logging:
  level:
    com.my.challenger: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.boot.model: DEBUG
    org.hibernate.cfg.annotations: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: DEBUG
    org.springframework.web: DEBUG
    org.springframework.boot.autoconfigure: INFO
    org.hibernate.boot.model.internal.CollectionBinder: DEBUG
    org.springframework.transaction: DEBUG
    org.springframework.orm.jpa: DEBUG
    org.springframework.web.servlet.mvc.method.annotation: DEBUG
    org.postgresql: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/challenger-dev.log
    max-size: 50MB
    max-history: 10

# Springdoc OpenAPI Configuration - Development
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    doc-expansion: list # Expand operations list in development
    disable-swagger-default-url: false
  show-actuator: true

# Development specific configurations
debug: true

# PostgreSQL specific development configurations
---
#spring:
#  config:
#    activate:
#      on-profile: dev-postgres
#  datasource:
#    # Alternative PostgreSQL configuration for different dev scenarios
#    url: jdbc:postgresql://localhost:5433/challenger_dev_db # Different port
#    username: postgres
#    password: postgres
#    hikari:
#      schema: public
#      connection-init-sql: |
#        CREATE SCHEMA IF NOT EXISTS challenger;
#        SET search_path TO challenger, public;

# Docker PostgreSQL Development Configuration
---
#spring:
#  config:
#    activate:
#      on-profile: dev-docker
#  datasource:
#    url: jdbc:postgresql://postgres:5432/challenger_dev_db
#    username: challenger_user
#    password: challenger_password

