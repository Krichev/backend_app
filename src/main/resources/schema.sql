-- Drop tables if they exist (for development/testing)
DROP TABLE IF EXISTS quiz_rounds;
DROP TABLE IF EXISTS quiz_sessions;
DROP TABLE IF EXISTS quiz_questions;
DROP TABLE IF EXISTS user_activity_logs;
DROP TABLE IF EXISTS user_connections;
DROP TABLE IF EXISTS reward_users;
DROP TABLE IF EXISTS task_completions;
DROP TABLE IF EXISTS quest_groups;
DROP TABLE IF EXISTS group_users;
DROP TABLE IF EXISTS user_quests;
DROP TABLE IF EXISTS rewards;
DROP TABLE IF EXISTS tasks;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS quests;
DROP TABLE IF EXISTS verification_details;
DROP TABLE IF EXISTS photo_verification_details;
DROP TABLE IF EXISTS location_coordinates;
DROP TABLE IF EXISTS challenge_progress;
DROP TABLE IF EXISTS challenge_participants;
DROP TABLE IF EXISTS challenge_quests;
DROP TABLE IF EXISTS challenges;
DROP TABLE IF EXISTS stakes;

-- Users table
CREATE TABLE IF NOT EXISTS users
(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username            VARCHAR(255) NOT NULL,
    email               VARCHAR(255) NOT NULL UNIQUE,
    password            VARCHAR(255) NOT NULL,
    profile_picture_url TEXT,
    bio                 TEXT,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Groups table
CREATE TABLE IF NOT EXISTS groups
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name            VARCHAR(255) NOT NULL,
    description     TEXT,
    type            VARCHAR(50),
    privacy_setting VARCHAR(50),
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creator_id      BIGINT,
    FOREIGN KEY (creator_id) REFERENCES users (id)
);

-- Quests table
CREATE TABLE IF NOT EXISTS quests
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title       VARCHAR(255) NOT NULL,
    description TEXT,
    type        VARCHAR(50), -- CHALLENGE, QUIZ, ACTIVITY_PARTNER, etc.
    visibility  VARCHAR(50), -- PUBLIC, PRIVATE, GROUP_ONLY
    status      VARCHAR(50), -- OPEN, IN_PROGRESS, COMPLETED, CANCELLED
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    creator_id  BIGINT,
    FOREIGN KEY (creator_id) REFERENCES users (id)
);

-- Tasks table
CREATE TABLE IF NOT EXISTS tasks
(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title               VARCHAR(255) NOT NULL,
    description         TEXT,
    type                VARCHAR(50), -- DAILY, ONE_TIME, RECURRING, etc.
    status              VARCHAR(50), -- NOT_STARTED, IN_PROGRESS, COMPLETED, VERIFIED, FAILED
    verification_method VARCHAR(50), -- MANUAL, FITNESS_API, PHOTO, QUIZ, etc.
    start_date          TIMESTAMP,
    end_date            TIMESTAMP,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quest_id            BIGINT,
    assigned_to         BIGINT,
    FOREIGN KEY (quest_id) REFERENCES quests (id),
    FOREIGN KEY (assigned_to) REFERENCES users (id)
);

-- Task Completions table
CREATE TABLE IF NOT EXISTS task_completions
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id            BIGINT,
    user_id            BIGINT,
    status             VARCHAR(50), -- SUBMITTED, VERIFIED, REJECTED
    completion_date    TIMESTAMP,
    verification_date  TIMESTAMP,
    verification_proof TEXT,        -- URL or metadata
    notes              TEXT,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (task_id) REFERENCES tasks (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- Rewards table
CREATE TABLE IF NOT EXISTS rewards
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description    TEXT,
    type           VARCHAR(50), -- MONETARY, POINTS, BADGE, CUSTOM
    monetary_value DECIMAL(10, 2),
    currency       VARCHAR(10),
    reward_source  VARCHAR(50), -- INDIVIDUAL, GROUP, SYSTEM
    quest_id       BIGINT,
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (quest_id) REFERENCES quests (id)
);

-- User-Quest relationship (many-to-many)
CREATE TABLE IF NOT EXISTS user_quests
(
    user_id   BIGINT,
    quest_id  BIGINT,
    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status    VARCHAR(50), -- ACTIVE, COMPLETED, ABANDONED
    PRIMARY KEY (user_id, quest_id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (quest_id) REFERENCES quests (id)
);

-- Group-User relationship (many-to-many)
CREATE TABLE IF NOT EXISTS group_users
(
    group_id  BIGINT,
    user_id   BIGINT,
    role      VARCHAR(50), -- ADMIN, MEMBER, MODERATOR
    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (group_id, user_id),
    FOREIGN KEY (group_id) REFERENCES groups (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- Quest-Group relationship (many-to-many)
CREATE TABLE IF NOT EXISTS quest_groups
(
    quest_id BIGINT,
    group_id BIGINT,
    PRIMARY KEY (quest_id, group_id),
    FOREIGN KEY (quest_id) REFERENCES quests (id),
    FOREIGN KEY (group_id) REFERENCES groups (id)
);

-- Reward-User relationship (many-to-many)
CREATE TABLE IF NOT EXISTS reward_users
(
    reward_id    BIGINT,
    user_id      BIGINT,
    awarded_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (reward_id, user_id),
    FOREIGN KEY (reward_id) REFERENCES rewards (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- User Connections table (for finding other users)
CREATE TABLE IF NOT EXISTS user_connections
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id           BIGINT,
    connected_user_id BIGINT,
    status            VARCHAR(50), -- PENDING, ACCEPTED, REJECTED, BLOCKED
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (connected_user_id) REFERENCES users (id)
);

-- User Activity Logs
CREATE TABLE IF NOT EXISTS user_activity_logs
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       BIGINT,
    activity_type VARCHAR(100),
    description   TEXT,
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_quests_creator ON quests (creator_id);
CREATE INDEX IF NOT EXISTS idx_tasks_quest ON tasks (quest_id);
CREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks (assigned_to);
CREATE INDEX IF NOT EXISTS idx_rewards_quest ON rewards (quest_id);
CREATE INDEX IF NOT EXISTS idx_user_connections_user ON user_connections (user_id);
CREATE INDEX IF NOT EXISTS idx_user_connections_connected ON user_connections (connected_user_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_logs_user ON user_activity_logs (user_id);


-- Create the challenges table
CREATE TABLE IF NOT EXISTS challenges
(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title               VARCHAR(255) NOT NULL,
    description         TEXT,
    type                VARCHAR(50)  NOT NULL, -- ACCOUNTABILITY, QUEST, EVENT
    creator_id          BIGINT       NOT NULL,
    group_id            BIGINT,
    is_public           BOOLEAN   DEFAULT true,
    start_date          TIMESTAMP,
    end_date            TIMESTAMP,
    frequency           VARCHAR(50),           -- DAILY, WEEKLY, ONE_TIME
    verification_method VARCHAR(50),           -- ACTIVITY, PHOTO, LOCATION, MANUAL
    status              VARCHAR(50)  NOT NULL, -- PENDING, ACTIVE, COMPLETED, CANCELLED
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (creator_id) REFERENCES users (id),
    FOREIGN KEY (group_id) REFERENCES groups (id)
);

-- Create PhotoVerificationDetails table
CREATE TABLE photo_verification_details
(
    id                        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description               VARCHAR(255),
    requires_photo_comparison BOOLEAN     DEFAULT FALSE,
    verification_mode         VARCHAR(50) DEFAULT 'standard',
    created_at                TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    updated_at                TIMESTAMP   DEFAULT CURRENT_TIMESTAMP
);

-- Create LocationCoordinates table
CREATE TABLE location_coordinates
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    latitude   DOUBLE PRECISION,
    longitude  DOUBLE PRECISION,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create VerificationDetails table (assuming this becomes an entity too)
CREATE TABLE verification_details
(
    id                      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    activity_type           VARCHAR(100),
    target_value            DOUBLE PRECISION,
    radius                  DOUBLE PRECISION,
    photo_details_id        BIGINT,
    location_coordinates_id BIGINT,
    challenge_id            BIGINT,
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (photo_details_id) REFERENCES photo_verification_details (id),
    FOREIGN KEY (location_coordinates_id) REFERENCES location_coordinates (id),
    FOREIGN KEY (challenge_id) REFERENCES challenges (id)
);

-- Create the stakes table
CREATE TABLE IF NOT EXISTS stakes
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    challenge_id    BIGINT NOT NULL,
    amount          DOUBLE PRECISION,
    currency        VARCHAR(50),
    collective_pool BOOLEAN DEFAULT false,
    FOREIGN KEY (challenge_id) REFERENCES challenges (id) ON DELETE CASCADE
);

-- Create the challenge_participants table (many-to-many)
CREATE TABLE IF NOT EXISTS challenge_participants
(
    challenge_id BIGINT,
    user_id      BIGINT,
    join_date    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (challenge_id, user_id),
    FOREIGN KEY (challenge_id) REFERENCES challenges (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- Create the challenge_progress table
CREATE TABLE IF NOT EXISTS challenge_progress
(
    id                    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    challenge_id          BIGINT      NOT NULL,
    user_id               BIGINT      NOT NULL,
    status                VARCHAR(50) NOT NULL, -- IN_PROGRESS, COMPLETED, FAILED
    completion_percentage DOUBLE PRECISION DEFAULT 0,
    verification_data     TEXT,                 -- JSON or URL to verification data
    verification_status   VARCHAR(50),          -- PENDING, VERIFIED, REJECTED
    verified_by           BIGINT,               -- User who verified the completion
    verification_date     TIMESTAMP,
    created_at            TIMESTAMP        DEFAULT CURRENT_TIMESTAMP,
    updated_at            TIMESTAMP        DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (challenge_id) REFERENCES challenges (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (verified_by) REFERENCES users (id)
);

-- Create a mapping table between challenges and quests
CREATE TABLE IF NOT EXISTS challenge_quests
(
    challenge_id BIGINT,
    quest_id     BIGINT,
    PRIMARY KEY (challenge_id, quest_id),
    FOREIGN KEY (challenge_id) REFERENCES challenges (id) ON DELETE CASCADE,
    FOREIGN KEY (quest_id) REFERENCES quests (id) ON DELETE CASCADE
);

-- Alternatively, add challenge_id to the quests table
ALTER TABLE quests
    ADD COLUMN challenge_id BIGINT;
ALTER TABLE quests
    ADD CONSTRAINT fk_quest_challenge FOREIGN KEY (challenge_id) REFERENCES challenges (id);

-- Modify the tasks table to add challenge_id column
ALTER TABLE tasks
    ADD COLUMN challenge_id BIGINT;
ALTER TABLE tasks
    ADD CONSTRAINT fk_task_challenge FOREIGN KEY (challenge_id) REFERENCES challenges (id);

-- ===========================
-- NEW QUIZ TABLES
-- ===========================

-- Quiz Questions table
CREATE TABLE IF NOT EXISTS quiz_questions
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question        VARCHAR(1000) NOT NULL,
    answer          VARCHAR(500)  NOT NULL,
    difficulty      VARCHAR(50),  -- EASY, MEDIUM, HARD
    topic           VARCHAR(200),
    source          VARCHAR(500),
    additional_info VARCHAR(1000),
    is_user_created BOOLEAN   DEFAULT FALSE,
    creator_id      BIGINT,
    external_id     VARCHAR(255), -- For questions from external APIs like db.chgk.info
    usage_count     INTEGER   DEFAULT 0,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_used       TIMESTAMP,
    FOREIGN KEY (creator_id) REFERENCES users (id)
);

-- Quiz Sessions table
CREATE TABLE IF NOT EXISTS quiz_sessions
(
    id                     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    challenge_id           BIGINT NOT NULL,
    host_user_id           BIGINT NOT NULL,
    team_name              VARCHAR(200),
    team_members           VARCHAR(1000), -- JSON array stored as string
    difficulty             VARCHAR(50),   -- EASY, MEDIUM, HARD
    round_time_seconds     INTEGER,
    total_rounds           INTEGER,
    completed_rounds       INTEGER   DEFAULT 0,
    correct_answers        INTEGER   DEFAULT 0,
    enable_ai_host         BOOLEAN   DEFAULT FALSE,
    question_source        VARCHAR(50),   -- 'app' or 'user'
    status                 VARCHAR(50),   -- CREATED, IN_PROGRESS, COMPLETED, ABANDONED, CANCELLED
    started_at             TIMESTAMP,
    completed_at           TIMESTAMP,
    total_duration_seconds INTEGER,
    created_at             TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at             TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (challenge_id) REFERENCES challenges (id),
    FOREIGN KEY (host_user_id) REFERENCES users (id)
);

-- Quiz Rounds table
CREATE TABLE IF NOT EXISTS quiz_rounds
(
    id                           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_session_id              BIGINT  NOT NULL,
    question_id                  BIGINT  NOT NULL,
    round_number                 INTEGER NOT NULL,
    team_answer                  VARCHAR(500),
    is_correct                   BOOLEAN   DEFAULT FALSE,
    player_who_answered          VARCHAR(200),
    discussion_notes             VARCHAR(2000),
    round_started_at             TIMESTAMP,
    discussion_started_at        TIMESTAMP,
    answer_submitted_at          TIMESTAMP,
    discussion_duration_seconds  INTEGER,
    total_round_duration_seconds INTEGER,
    hint_used                    BOOLEAN   DEFAULT FALSE,
    voice_recording_used         BOOLEAN   DEFAULT FALSE,
    ai_feedback                  VARCHAR(1000),
    created_at                   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at                   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (quiz_session_id) REFERENCES quiz_sessions (id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES quiz_questions (id)
);

-- Create indices for quiz tables for better performance
CREATE INDEX IF NOT EXISTS idx_quiz_questions_creator ON quiz_questions (creator_id);
CREATE INDEX IF NOT EXISTS idx_quiz_questions_difficulty ON quiz_questions (difficulty);
CREATE INDEX IF NOT EXISTS idx_quiz_questions_user_created ON quiz_questions (is_user_created);
CREATE INDEX IF NOT EXISTS idx_quiz_questions_external_id ON quiz_questions (external_id);
CREATE INDEX IF NOT EXISTS idx_quiz_questions_usage_count ON quiz_questions (usage_count);
CREATE INDEX IF NOT EXISTS idx_quiz_questions_last_used ON quiz_questions (last_used);

CREATE INDEX IF NOT EXISTS idx_quiz_sessions_challenge ON quiz_sessions (challenge_id);
CREATE INDEX IF NOT EXISTS idx_quiz_sessions_host_user ON quiz_sessions (host_user_id);
CREATE INDEX IF NOT EXISTS idx_quiz_sessions_status ON quiz_sessions (status);
CREATE INDEX IF NOT EXISTS idx_quiz_sessions_created_at ON quiz_sessions (created_at);

CREATE INDEX IF NOT EXISTS idx_quiz_rounds_session ON quiz_rounds (quiz_session_id);
CREATE INDEX IF NOT EXISTS idx_quiz_rounds_question ON quiz_rounds (question_id);
CREATE INDEX IF NOT EXISTS idx_quiz_rounds_round_number ON quiz_rounds (round_number);
CREATE INDEX IF NOT EXISTS idx_quiz_rounds_is_correct ON quiz_rounds (is_correct);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_verification_details_photo ON verification_details (photo_details_id);
CREATE INDEX IF NOT EXISTS idx_verification_details_location ON verification_details (location_coordinates_id);
CREATE INDEX IF NOT EXISTS idx_verification_details_challenge ON verification_details (challenge_id);
CREATE INDEX IF NOT EXISTS idx_challenges_creator ON challenges (creator_id);
CREATE INDEX IF NOT EXISTS idx_challenges_group ON challenges (group_id);
CREATE INDEX IF NOT EXISTS idx_stakes_challenge ON stakes (challenge_id);
CREATE INDEX IF NOT EXISTS idx_challenge_progress_challenge ON challenge_progress (challenge_id);
CREATE INDEX IF NOT EXISTS idx_challenge_progress_user ON challenge_progress (user_id);
CREATE INDEX IF NOT EXISTS idx_challenge_quests_quest ON challenge_quests (quest_id);
CREATE INDEX IF NOT EXISTS idx_quests_challenge ON quests (challenge_id);
CREATE INDEX IF NOT EXISTS idx_tasks_challenge ON tasks (challenge_id);

-- Add missing columns to the challenge_progress table
ALTER TABLE challenge_progress
    ADD COLUMN IF NOT EXISTS streak INTEGER;
ALTER TABLE challenge_progress
    ADD COLUMN IF NOT EXISTS total_rewards_earned DOUBLE PRECISION;

-- Create the table for tracking completed days
CREATE TABLE IF NOT EXISTS challenge_progress_completed_days
(
    challenge_progress_id BIGINT NOT NULL,
    completed_day         DATE   NOT NULL,
    PRIMARY KEY (challenge_progress_id, completed_day),
    FOREIGN KEY (challenge_progress_id) REFERENCES challenge_progress (id) ON DELETE CASCADE
);

-- Add an index for faster queries
CREATE INDEX IF NOT EXISTS idx_challenge_progress_completed_days
    ON challenge_progress_completed_days (challenge_progress_id);

-- Create custom types for enumeration values (H2 compatible approach)
-- Note: H2 doesn't support CREATE TYPE like PostgreSQL, so we'll use CHECK constraints instead

-- Add check constraints for enumeration validation
ALTER TABLE quiz_questions
    ADD CONSTRAINT check_quiz_difficulty
        CHECK (difficulty IN ('EASY', 'MEDIUM', 'HARD'));

ALTER TABLE quiz_sessions
    ADD CONSTRAINT check_quiz_session_difficulty
        CHECK (difficulty IN ('EASY', 'MEDIUM', 'HARD'));

ALTER TABLE quiz_sessions
    ADD CONSTRAINT check_quiz_session_question_source
        CHECK (question_source IN ('app', 'user'));

-- Add the new constraint with ARCHIVED status
ALTER TABLE quiz_sessions
    ADD CONSTRAINT check_quiz_session_status
        CHECK (status IN ('CREATED', 'IN_PROGRESS', 'COMPLETED', 'ABANDONED', 'CANCELLED', 'ARCHIVED'));

-- Additional constraints for existing tables
ALTER TABLE groups
    ADD CONSTRAINT check_group_type
        CHECK (type IN ('CHALLENGE', 'SOCIAL', 'LEARNING', 'FITNESS', 'HOBBY'));

ALTER TABLE groups
    ADD CONSTRAINT check_privacy_setting
        CHECK (privacy_setting IN ('PUBLIC', 'PRIVATE', 'INVITATION_ONLY'));

ALTER TABLE quests
    ADD CONSTRAINT check_quest_type
        CHECK (type IN ('CHALLENGE', 'ACTIVITY_PARTNER', 'LEARNING', 'CONTEST'));

ALTER TABLE quests
    ADD CONSTRAINT check_quest_visibility
        CHECK (visibility IN ('PUBLIC', 'PRIVATE', 'GROUP_ONLY'));

ALTER TABLE quests
    ADD CONSTRAINT check_quest_status
        CHECK (status IN ('OPEN', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'));

ALTER TABLE tasks
    ADD CONSTRAINT check_task_type
        CHECK (type IN ('DAILY', 'ONE_TIME', 'RECURRING', 'WEEKLY', 'MONTHLY'));

ALTER TABLE tasks
    ADD CONSTRAINT check_task_status
        CHECK (status IN ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'VERIFIED', 'FAILED'));

ALTER TABLE tasks
    ADD CONSTRAINT check_verification_method
        CHECK (verification_method IN ('MANUAL', 'FITNESS_API', 'PHOTO', 'QUIZ', 'LOCATION', 'ACTIVITY'));

ALTER TABLE task_completions
    ADD CONSTRAINT check_completion_status
        CHECK (status IN ('SUBMITTED', 'VERIFIED', 'REJECTED'));

ALTER TABLE rewards
    ADD CONSTRAINT check_reward_type
        CHECK (type IN ('MONETARY', 'POINTS', 'BADGE', 'CUSTOM'));

ALTER TABLE rewards
    ADD CONSTRAINT check_reward_source
        CHECK (reward_source IN ('INDIVIDUAL', 'GROUP', 'SYSTEM'));

ALTER TABLE rewards
    ADD CONSTRAINT check_currency
        CHECK (currency IN ('USD', 'EUR', 'GBP', 'CAD', 'AUD', 'POINTS'));

ALTER TABLE user_quests
    ADD CONSTRAINT check_user_quest_status
        CHECK (status IN ('ACTIVE', 'COMPLETED', 'ABANDONED'));

ALTER TABLE group_users
    ADD CONSTRAINT check_user_role
        CHECK (role IN ('ADMIN', 'MEMBER', 'MODERATOR'));

ALTER TABLE user_connections
    ADD CONSTRAINT check_connection_status
        CHECK (status IN ('PENDING', 'ACCEPTED', 'REJECTED', 'BLOCKED'));

ALTER TABLE user_activity_logs
    ADD CONSTRAINT check_activity_type
        CHECK (activity_type IN ('TASK_COMPLETION', 'JOIN_GROUP', 'COMPLETE_QUEST', 'REWARD_EARNED', 'CONNECTION_MADE',
                                 'CHALLENGE_JOINED', 'CHALLENGE_COMPLETED'));

ALTER TABLE challenges
    ADD CONSTRAINT check_challenge_type
        CHECK (type IN ('ACCOUNTABILITY', 'QUEST', 'EVENT', 'QUIZ'));

ALTER TABLE challenges
    ADD CONSTRAINT check_challenge_status
        CHECK (status IN ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'OPEN'));

ALTER TABLE challenges
    ADD CONSTRAINT check_challenge_frequency
        CHECK (frequency IN ('DAILY', 'WEEKLY', 'MONTHLY', 'ONE_TIME'));

ALTER TABLE challenge_progress
    ADD CONSTRAINT check_progress_status
        CHECK (status IN ('IN_PROGRESS', 'COMPLETED', 'FAILED'));

ALTER TABLE challenge_progress
    ADD CONSTRAINT check_verification_status
        CHECK (verification_status IN ('PENDING', 'VERIFIED', 'REJECTED'));

-- Add quiz_config column to challenges table
ALTER TABLE challenges
    ADD COLUMN IF NOT EXISTS quiz_config TEXT;

-- Add constraint to ensure quiz challenges have proper verification method
ALTER TABLE challenges
    ADD CONSTRAINT check_quiz_verification
        CHECK (type != 'QUIZ' OR verification_method = 'QUIZ');

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_challenges_type_verification
    ON challenges (type, verification_method);

CREATE INDEX IF NOT EXISTS idx_quiz_questions_creator_source
    ON quiz_questions (creator_id, source);

-- Add unique constraint to prevent duplicate questions (optional)
CREATE UNIQUE INDEX IF NOT EXISTS idx_quiz_questions_unique
    ON quiz_questions (creator_id, question, answer)
    WHERE is_user_created = true;

ALTER TABLE quiz_questions
    ADD COLUMN challenge_id BIGINT;

ALTER TABLE quiz_questions
    ADD CONSTRAINT fk_quiz_challenge
        FOREIGN KEY (challenge_id) REFERENCES challenges (id);
