-- Drop tables if they exist (for development/testing)
DROP TABLE IF EXISTS user_activity_logs;
DROP TABLE IF EXISTS user_connections;
DROP TABLE IF EXISTS reward_users;
DROP TABLE IF EXISTS task_completions;
DROP TABLE IF EXISTS quest_groups;
DROP TABLE IF EXISTS group_users;
DROP TABLE IF EXISTS user_quests;
DROP TABLE IF EXISTS rewards;
DROP TABLE IF EXISTS tasks;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS quests;
DROP TABLE IF EXISTS verification_details;
DROP TABLE IF EXISTS photo_verification_details;
DROP TABLE IF EXISTS location_coordinates;
DROP TABLE IF EXISTS challenge_progress;
DROP TABLE IF EXISTS challenge_participants;
DROP TABLE IF EXISTS challenge_quests;
DROP TABLE IF EXISTS challenges;
DROP TABLE IF EXISTS location_coordinates;
DROP TABLE IF EXISTS verification_details;
DROP TABLE IF EXISTS stakes;

-- Users table
CREATE TABLE IF NOT EXISTS users (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     username VARCHAR(255) NOT NULL,
                                     email VARCHAR(255) NOT NULL UNIQUE,
                                     password VARCHAR(255) NOT NULL,
                                     profile_picture_url TEXT,
                                     bio TEXT,
                                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Groups table
CREATE TABLE IF NOT EXISTS groups (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      name VARCHAR(255) NOT NULL,
                                      description TEXT,
                                      type VARCHAR(50),
                                      privacy_setting VARCHAR(50),
                                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      creator_id BIGINT,
                                      FOREIGN KEY (creator_id) REFERENCES users(id)
);

-- Quests table
CREATE TABLE IF NOT EXISTS quests (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      title VARCHAR(255) NOT NULL,
                                      description TEXT,
                                      type VARCHAR(50), -- CHALLENGE, QUIZ, ACTIVITY_PARTNER, etc.
                                      visibility VARCHAR(50), -- PUBLIC, PRIVATE, GROUP_ONLY
                                      status VARCHAR(50), -- OPEN, IN_PROGRESS, COMPLETED, CANCELLED
                                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      creator_id BIGINT,
                                      FOREIGN KEY (creator_id) REFERENCES users(id)
);

-- Tasks table
CREATE TABLE IF NOT EXISTS tasks (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     title VARCHAR(255) NOT NULL,
                                     description TEXT,
                                     type VARCHAR(50), -- DAILY, ONE_TIME, RECURRING, etc.
                                     status VARCHAR(50), -- NOT_STARTED, IN_PROGRESS, COMPLETED, VERIFIED, FAILED
                                     verification_method VARCHAR(50), -- MANUAL, FITNESS_API, PHOTO, QUIZ, etc.
                                     start_date TIMESTAMP,
                                     end_date TIMESTAMP,
                                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                     quest_id BIGINT,
                                     assigned_to BIGINT,
                                     FOREIGN KEY (quest_id) REFERENCES quests(id),
                                     FOREIGN KEY (assigned_to) REFERENCES users(id)
);

-- Task Completions table
CREATE TABLE IF NOT EXISTS task_completions (
                                                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                task_id BIGINT,
                                                user_id BIGINT,
                                                status VARCHAR(50), -- SUBMITTED, VERIFIED, REJECTED
                                                completion_date TIMESTAMP,
                                                verification_date TIMESTAMP,
                                                verification_proof TEXT, -- URL or metadata
                                                notes TEXT,
                                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                FOREIGN KEY (task_id) REFERENCES tasks(id),
                                                FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Rewards table
CREATE TABLE IF NOT EXISTS rewards (
                                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       description TEXT,
                                       type VARCHAR(50), -- MONETARY, POINTS, BADGE, CUSTOM
                                       monetary_value DECIMAL(10,2),
                                       currency VARCHAR(10),
                                       reward_source VARCHAR(50), -- INDIVIDUAL, GROUP, SYSTEM
                                       quest_id BIGINT,
                                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                       FOREIGN KEY (quest_id) REFERENCES quests(id)
);

-- User-Quest relationship (many-to-many)
CREATE TABLE IF NOT EXISTS user_quests (
                                           user_id BIGINT,
                                           quest_id BIGINT,
                                           join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                           status VARCHAR(50), -- ACTIVE, COMPLETED, ABANDONED
                                           PRIMARY KEY (user_id, quest_id),
                                           FOREIGN KEY (user_id) REFERENCES users(id),
                                           FOREIGN KEY (quest_id) REFERENCES quests(id)
);

-- Group-User relationship (many-to-many)
CREATE TABLE IF NOT EXISTS group_users (
                                           group_id BIGINT,
                                           user_id BIGINT,
                                           role VARCHAR(50), -- ADMIN, MEMBER, MODERATOR
                                           join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                           PRIMARY KEY (group_id, user_id),
                                           FOREIGN KEY (group_id) REFERENCES groups(id),
                                           FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Quest-Group relationship (many-to-many)
CREATE TABLE IF NOT EXISTS quest_groups (
                                            quest_id BIGINT,
                                            group_id BIGINT,
                                            PRIMARY KEY (quest_id, group_id),
                                            FOREIGN KEY (quest_id) REFERENCES quests(id),
                                            FOREIGN KEY (group_id) REFERENCES groups(id)
);

-- Reward-User relationship (many-to-many)
CREATE TABLE IF NOT EXISTS reward_users (
                                            reward_id BIGINT,
                                            user_id BIGINT,
                                            awarded_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                            PRIMARY KEY (reward_id, user_id),
                                            FOREIGN KEY (reward_id) REFERENCES rewards(id),
                                            FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User Connections table (for finding other users)
CREATE TABLE IF NOT EXISTS user_connections (
                                                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                user_id BIGINT,
                                                connected_user_id BIGINT,
                                                status VARCHAR(50), -- PENDING, ACCEPTED, REJECTED, BLOCKED
                                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                FOREIGN KEY (user_id) REFERENCES users(id),
                                                FOREIGN KEY (connected_user_id) REFERENCES users(id)
);

-- User Activity Logs
CREATE TABLE IF NOT EXISTS user_activity_logs (
                                                  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  user_id BIGINT,
                                                  activity_type VARCHAR(100),
                                                  description TEXT,
                                                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_quests_creator ON quests(creator_id);
CREATE INDEX IF NOT EXISTS idx_tasks_quest ON tasks(quest_id);
CREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks(assigned_to);
CREATE INDEX IF NOT EXISTS idx_rewards_quest ON rewards(quest_id);
CREATE INDEX IF NOT EXISTS idx_user_connections_user ON user_connections(user_id);
CREATE INDEX IF NOT EXISTS idx_user_connections_connected ON user_connections(connected_user_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_logs_user ON user_activity_logs(user_id);


-- Create the challenges table
CREATE TABLE IF NOT EXISTS challenges (
                                          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                          title VARCHAR(255) NOT NULL,
                                          description TEXT,
                                          type VARCHAR(50) NOT NULL, -- ACCOUNTABILITY, QUEST, EVENT
                                          creator_id BIGINT NOT NULL,
                                          group_id BIGINT,
                                          is_public BOOLEAN DEFAULT true,
                                          start_date TIMESTAMP,
                                          end_date TIMESTAMP,
                                          frequency VARCHAR(50), -- DAILY, WEEKLY, ONE_TIME
                                          verification_method VARCHAR(50), -- ACTIVITY, PHOTO, LOCATION, MANUAL
                                          status VARCHAR(50) NOT NULL, -- PENDING, ACTIVE, COMPLETED, CANCELLED
                                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                          FOREIGN KEY (creator_id) REFERENCES users(id),
                                          FOREIGN KEY (group_id) REFERENCES groups(id)
);



-- Create PhotoVerificationDetails table
CREATE TABLE photo_verification_details (
                                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            description VARCHAR(255),
                                            requires_photo_comparison BOOLEAN DEFAULT FALSE,
                                            verification_mode VARCHAR(50) DEFAULT 'standard',
                                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create LocationCoordinates table
CREATE TABLE location_coordinates (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      latitude DOUBLE PRECISION,
                                      longitude DOUBLE PRECISION,
                                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create VerificationDetails table (assuming this becomes an entity too)
CREATE TABLE verification_details (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      activity_type VARCHAR(100),
                                      target_value DOUBLE PRECISION,
                                      radius DOUBLE PRECISION,
                                      photo_details_id BIGINT,
                                      location_coordinates_id BIGINT,
                                      challenge_id BIGINT,
                                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                      FOREIGN KEY (photo_details_id) REFERENCES photo_verification_details(id),
                                      FOREIGN KEY (location_coordinates_id) REFERENCES location_coordinates(id),
                                      FOREIGN KEY (challenge_id) REFERENCES challenges(id)
);


-- Create the stakes table
CREATE TABLE IF NOT EXISTS stakes (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      challenge_id BIGINT NOT NULL,
                                      amount DOUBLE PRECISION,
                                      currency VARCHAR(50),
                                      collective_pool BOOLEAN DEFAULT false,
                                      FOREIGN KEY (challenge_id) REFERENCES challenges(id) ON DELETE CASCADE
);

-- Create the challenge_participants table (many-to-many)
CREATE TABLE IF NOT EXISTS challenge_participants (
                                                      challenge_id BIGINT,
                                                      user_id BIGINT,
                                                      join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                      PRIMARY KEY (challenge_id, user_id),
                                                      FOREIGN KEY (challenge_id) REFERENCES challenges(id) ON DELETE CASCADE,
                                                      FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Create the challenge_progress table
CREATE TABLE IF NOT EXISTS challenge_progress (
                                                  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  challenge_id BIGINT NOT NULL,
                                                  user_id BIGINT NOT NULL,
                                                  status VARCHAR(50) NOT NULL, -- IN_PROGRESS, COMPLETED, FAILED
                                                  completion_percentage DOUBLE PRECISION DEFAULT 0,
                                                  verification_data TEXT, -- JSON or URL to verification data
                                                  verification_status VARCHAR(50), -- PENDING, VERIFIED, REJECTED
                                                  verified_by BIGINT, -- User who verified the completion
                                                  verification_date TIMESTAMP,
                                                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                  FOREIGN KEY (challenge_id) REFERENCES challenges(id) ON DELETE CASCADE,
                                                  FOREIGN KEY (user_id) REFERENCES users(id),
                                                  FOREIGN KEY (verified_by) REFERENCES users(id)
);

-- Create a mapping table between challenges and quests
CREATE TABLE IF NOT EXISTS challenge_quests (
                                                challenge_id BIGINT,
                                                quest_id BIGINT,
                                                PRIMARY KEY (challenge_id, quest_id),
                                                FOREIGN KEY (challenge_id) REFERENCES challenges(id) ON DELETE CASCADE,
                                                FOREIGN KEY (quest_id) REFERENCES quests(id) ON DELETE CASCADE
);

-- Alternatively, add challenge_id to the quests table
ALTER TABLE quests ADD COLUMN challenge_id BIGINT;
ALTER TABLE quests ADD CONSTRAINT fk_quest_challenge FOREIGN KEY (challenge_id) REFERENCES challenges(id);

-- Modify the tasks table to add challenge_id column
ALTER TABLE tasks ADD COLUMN challenge_id BIGINT;
ALTER TABLE tasks ADD CONSTRAINT fk_task_challenge FOREIGN KEY (challenge_id) REFERENCES challenges(id);

-- Create indices for better performance
-- Add indexes for better performance
CREATE INDEX idx_verification_details_photo ON verification_details(photo_details_id);
CREATE INDEX idx_verification_details_location ON verification_details(location_coordinates_id);
CREATE INDEX idx_verification_details_challenge ON verification_details(challenge_id);
CREATE INDEX idx_challenges_creator ON challenges(creator_id);
CREATE INDEX idx_challenges_group ON challenges(group_id);
CREATE INDEX idx_stakes_challenge ON stakes(challenge_id);
CREATE INDEX idx_challenge_progress_challenge ON challenge_progress(challenge_id);
CREATE INDEX idx_challenge_progress_user ON challenge_progress(user_id);
CREATE INDEX idx_challenge_quests_quest ON challenge_quests(quest_id);
CREATE INDEX idx_quests_challenge ON quests(challenge_id);
CREATE INDEX idx_tasks_challenge ON tasks(challenge_id);

-- Create custom types for enumeration values

-- User related types
CREATE TYPE user_role_type AS ENUM ('ADMIN', 'MEMBER', 'MODERATOR');
CREATE TYPE connection_status_type AS ENUM ('PENDING', 'ACCEPTED', 'REJECTED', 'BLOCKED');

-- Group related types
CREATE TYPE group_type AS ENUM ('CHALLENGE', 'SOCIAL', 'LEARNING', 'FITNESS', 'HOBBY');
CREATE TYPE privacy_setting_type AS ENUM ('PUBLIC', 'PRIVATE', 'INVITATION_ONLY');

-- Quest related types
CREATE TYPE quest_type AS ENUM ('CHALLENGE', 'ACTIVITY_PARTNER', 'LEARNING', 'CONTEST');
CREATE TYPE visibility_type AS ENUM ('PUBLIC', 'PRIVATE', 'GROUP_ONLY');
CREATE TYPE quest_status_type AS ENUM ('OPEN', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED');
CREATE TYPE user_quest_status_type AS ENUM ('ACTIVE', 'COMPLETED', 'ABANDONED');

-- Task related types
CREATE TYPE task_type AS ENUM ('DAILY', 'ONE_TIME', 'RECURRING', 'WEEKLY', 'MONTHLY');
CREATE TYPE task_status_type AS ENUM ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'VERIFIED', 'FAILED');
CREATE TYPE verification_method_type AS ENUM ('MANUAL', 'FITNESS_API', 'PHOTO', 'QUIZ', 'LOCATION', 'ACTIVITY');
CREATE TYPE completion_status_type AS ENUM ('SUBMITTED', 'VERIFIED', 'REJECTED');

-- Reward related types
CREATE TYPE reward_type AS ENUM ('MONETARY', 'POINTS', 'BADGE', 'CUSTOM');
CREATE TYPE reward_source_type AS ENUM ('INDIVIDUAL', 'GROUP', 'SYSTEM');
CREATE TYPE currency_type AS ENUM ('USD', 'EUR', 'GBP', 'CAD', 'AUD', 'POINTS');

-- Activity log types
CREATE TYPE activity_type AS ENUM (
    'TASK_COMPLETION',
    'JOIN_GROUP',
    'COMPLETE_QUEST',
    'REWARD_EARNED',
    'CONNECTION_MADE',
    'CHALLENGE_JOINED',
    'CHALLENGE_COMPLETED'
    );

-- Challenge related types
CREATE TYPE challenge_type AS ENUM ('ACCOUNTABILITY', 'QUEST', 'EVENT', 'QUIZ');
CREATE TYPE challenge_status_type AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');
CREATE TYPE frequency_type AS ENUM ('DAILY', 'WEEKLY', 'MONTHLY', 'ONE_TIME');
CREATE TYPE progress_status_type AS ENUM ('IN_PROGRESS', 'COMPLETED', 'FAILED');
CREATE TYPE verification_status_type AS ENUM ('PENDING', 'VERIFIED', 'REJECTED');

-- Now modify the tables to use these custom types instead of VARCHARs

-- Modify users table (no enums needed)

-- Modify groups table
ALTER TABLE groups ALTER COLUMN type TYPE group_type USING type::group_type;
ALTER TABLE groups ALTER COLUMN privacy_setting TYPE privacy_setting_type USING privacy_setting::privacy_setting_type;

-- Modify quests table
ALTER TABLE quests ALTER COLUMN type TYPE quest_type USING type::quest_type;
ALTER TABLE quests ALTER COLUMN visibility TYPE visibility_type USING visibility::visibility_type;
ALTER TABLE quests ALTER COLUMN status TYPE quest_status_type USING status::quest_status_type;

-- Modify tasks table
ALTER TABLE tasks ALTER COLUMN type TYPE task_type USING type::task_type;
ALTER TABLE tasks ALTER COLUMN status TYPE task_status_type USING status::task_status_type;
ALTER TABLE tasks ALTER COLUMN verification_method TYPE verification_method_type USING verification_method::verification_method_type;

-- Modify task_completions table
ALTER TABLE task_completions ALTER COLUMN status TYPE completion_status_type USING status::completion_status_type;

-- Modify rewards table
ALTER TABLE rewards ALTER COLUMN type TYPE reward_type USING type::reward_type;
ALTER TABLE rewards ALTER COLUMN currency TYPE currency_type USING currency::currency_type;
ALTER TABLE rewards ALTER COLUMN reward_source TYPE reward_source_type USING reward_source::reward_source_type;

-- Modify user_quests table
ALTER TABLE user_quests ALTER COLUMN status TYPE user_quest_status_type USING status::user_quest_status_type;

-- Modify group_users table
ALTER TABLE group_users ALTER COLUMN role TYPE user_role_type USING role::user_role_type;

-- Modify user_connections table
ALTER TABLE user_connections ALTER COLUMN status TYPE connection_status_type USING status::connection_status_type;

-- Modify user_activity_logs table
ALTER TABLE user_activity_logs ALTER COLUMN activity_type TYPE activity_type USING activity_type::activity_type;

-- Modify challenges table
ALTER TABLE challenges ALTER COLUMN type TYPE challenge_type USING type::challenge_type;
ALTER TABLE challenges ALTER COLUMN frequency TYPE frequency_type USING frequency::frequency_type;
ALTER TABLE challenges ALTER COLUMN verification_method TYPE verification_method_type USING verification_method::verification_method_type;
ALTER TABLE challenges ALTER COLUMN status TYPE challenge_status_type USING status::challenge_status_type;

-- Modify challenge_progress table
ALTER TABLE challenge_progress ALTER COLUMN status TYPE progress_status_type USING status::progress_status_type;
ALTER TABLE challenge_progress ALTER COLUMN verification_status TYPE verification_status_type USING verification_status::verification_status_type;
-- Add missing columns to the challenge_progress table
ALTER TABLE challenge_progress ADD COLUMN IF NOT EXISTS streak INTEGER;
ALTER TABLE challenge_progress ADD COLUMN IF NOT EXISTS total_rewards_earned DOUBLE PRECISION;

-- Create the table for tracking completed days
CREATE TABLE IF NOT EXISTS challenge_progress_completed_days (
                                                                 challenge_progress_id BIGINT NOT NULL,
                                                                 completed_day DATE NOT NULL,
                                                                 PRIMARY KEY (challenge_progress_id, completed_day),
                                                                 FOREIGN KEY (challenge_progress_id) REFERENCES challenge_progress(id) ON DELETE CASCADE
);

-- Add an index for faster queries
CREATE INDEX IF NOT EXISTS idx_challenge_progress_completed_days
    ON challenge_progress_completed_days(challenge_progress_id);